[{"C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\index.js":"1","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\App.js":"2","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Home.js":"3","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Nav.js":"4","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\ImageDay.js":"5","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\SpaceWeather.js":"6","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Asteroids.js":"7","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Mars.js":"8","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\ToggleSwitch.js":"9","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\SearchBar.js":"10"},{"size":200,"mtime":1645723802888,"results":"11","hashOfConfig":"12"},{"size":1233,"mtime":1646089659939,"results":"13","hashOfConfig":"12"},{"size":781,"mtime":1645381638582,"results":"14","hashOfConfig":"12"},{"size":1501,"mtime":1645995844243,"results":"15","hashOfConfig":"12"},{"size":1210,"mtime":1646258746766,"results":"16","hashOfConfig":"12"},{"size":7822,"mtime":1647291430663,"results":"17","hashOfConfig":"12"},{"size":4189,"mtime":1646674545807,"results":"18","hashOfConfig":"12"},{"size":2515,"mtime":1646258962424,"results":"19","hashOfConfig":"12"},{"size":723,"mtime":1645377095774,"results":"20","hashOfConfig":"12"},{"size":1280,"mtime":1647291680763,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1vlhwmt",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"25"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\index.js",[],[],["57","58"],"C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\App.js",["59"],[],"import NavBar from \"./Components/Nav\";\nimport \"./App.css\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport ImageDay from \"./Components/ImageDay\";\nimport Home from \"./Components/Home\";\nimport Asteroid from \"./Components/Asteroids\";\nimport SpaceWeather from \"./Components/SpaceWeather\";\nimport Mars from \"./Components/Mars\";\nimport { useEffect, useState } from \"react\";\n\nconst App = () => {\n  // const apiKey = process.env.REACT_APP_API_KEY;\n  const [apiKey, setApiKey] = useState();\n\n  useEffect(() => {\n    getKey();\n  }, []);\n\n  const getKey = async () => {\n    const query = await fetch(\"/api\");\n    const res = await query.json();\n    setApiKey(res.apiKey);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"brand\">DSF - Daily Space Facts</h1>\n      <BrowserRouter>\n        <NavBar />\n        <Routes>\n          <Route path=\"/\" element={<Home />}></Route>\n          <Route path=\"/PictureOfTheDay\" element={<ImageDay />} />\n          <Route path=\"/Mars\" element={<Mars />} />\n          <Route path=\"/NearEarthObjects\" element={<Asteroid />} />\n          <Route path=\"/SpaceWeather\" element={<SpaceWeather />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Home.js",[],[],"C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Nav.js",["60"],[],"import { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst NavBar = () => {\r\n  const [toggleButton, setToggleButton] = useState();\r\n  const [navBarLinks, setNavBarLinks] = useState();\r\n  //const toggleButton = document.getElementsByClassName(\"toggle-button\")[0];\r\n  //const navBarLinks = document.getElementsByClassName(\"navbar-links\")[0];\r\n\r\n  useEffect(() => {\r\n    setToggleButton(document.getElementsByClassName(\"toggle-button\")[0]);\r\n    setNavBarLinks(document.getElementsByClassName(\"navbar-links\")[0]);\r\n    test();\r\n  }, [toggleButton]);\r\n\r\n  const test = () => {\r\n    if (navBarLinks !== undefined) {\r\n      toggleButton.addEventListener(\"click\", () => {\r\n        navBarLinks.classList.toggle(\"active\");\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <p className=\"toggle-button\">\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n      </p>\r\n      <ul className=\"navbar-links\">\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/PictureOfTheDay\">Picture of the day</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/Mars\">Mars Gallery</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/NearEarthObjects\">Near Earth Objects</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/SpaceWeather\">Space weather</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\ImageDay.js",[],[],"C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\SpaceWeather.js",["61"],[],"C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Asteroids.js",["62"],[],"import { useEffect, useState } from \"react\";\r\nimport ToggleSwitch from \"./ToggleSwitch\";\r\nimport axios from \"axios\";\r\n\r\nconst Asteroid = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [imperial, setImperial] = useState(false);\r\n  const [listAsteroids, setListAsteroids] = useState([]);\r\n\r\n  const tmpDate = new Date();\r\n  const day =\r\n    tmpDate.getUTCDate() < 10\r\n      ? `0${tmpDate.getUTCDate().toString()}`\r\n      : tmpDate.getUTCDate();\r\n  const month =\r\n    tmpDate.getUTCMonth() + 1 < 10\r\n      ? `0${(tmpDate.getUTCMonth() + 1).toString()}`\r\n      : tmpDate.getUTCMonth() + 1;\r\n  const year = tmpDate.getUTCFullYear();\r\n\r\n  const date = `${year}-${month}-${day}`;\r\n\r\n  useEffect(() => {\r\n    asteroids();\r\n  }, []);\r\n\r\n  const asteroids = async () => {\r\n    setLoading(true);\r\n    const query = {\r\n      method: \"GET\",\r\n      url: \"/api/near-earth-objects\",\r\n      params: {\r\n        start_date: date,\r\n        end_date: date,\r\n      },\r\n    };\r\n    axios\r\n      .request(query)\r\n      .then((response) => {\r\n        setListAsteroids(response.data.near_earth_objects[date]);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const listMapped = listAsteroids.map((element) => (\r\n    <li className=\"asteroid-card\" key={\"asteroid-\" + element.name}>\r\n      <h1 className=\"title-objects\">Name: {element.name}</h1>\r\n      <p>\r\n        Magnitude: <strong>{element.absolute_magnitude_h}</strong>\r\n      </p>\r\n      <p>\r\n        Estimated Diameter: Min:{\" \"}\r\n        <strong>\r\n          {imperial\r\n            ? Math.round(\r\n                element.estimated_diameter.feet.estimated_diameter_min * 100\r\n              ) / 100\r\n            : Math.round(\r\n                element.estimated_diameter.meters.estimated_diameter_min * 100\r\n              ) / 100}\r\n          {imperial ? \"ft\" : \"m\"}\r\n        </strong>{\" \"}\r\n        - Max:{\" \"}\r\n        <strong>\r\n          {imperial\r\n            ? Math.round(\r\n                element.estimated_diameter.feet.estimated_diameter_max * 100\r\n              ) / 100\r\n            : Math.round(\r\n                element.estimated_diameter.meters.estimated_diameter_max * 100\r\n              ) / 100}\r\n          {imperial ? \"ft\" : \"m\"}\r\n        </strong>\r\n      </p>\r\n      <p>\r\n        Closest Approach Date:{\" \"}\r\n        <strong>\r\n          {element.close_approach_data[0].close_approach_date_full} UTC\r\n        </strong>\r\n      </p>\r\n      <p>\r\n        {\" \"}\r\n        Will miss the earth by:{\" \"}\r\n        <strong>\r\n          {imperial\r\n            ? Math.round(\r\n                element.close_approach_data[0].miss_distance.kilometers\r\n              )\r\n            : Math.round(element.close_approach_data[0].miss_distance.miles)}\r\n          {imperial ? \"miles\" : \"kms\"}\r\n        </strong>\r\n      </p>\r\n      <p>\r\n        Relative velocity:{\" \"}\r\n        <strong>\r\n          {imperial\r\n            ? Math.round(\r\n                (element.close_approach_data[0].relative_velocity\r\n                  .miles_per_hour *\r\n                  100) /\r\n                  100\r\n              )\r\n            : Math.round(\r\n                element.close_approach_data[0].relative_velocity\r\n                  .kilometers_per_hour\r\n              )}\r\n          {imperial\r\n            ? \"miles/hr\"\r\n            : `km/hr (${\r\n                Math.round(\r\n                  element.close_approach_data[0].relative_velocity\r\n                    .kilometers_per_second * 100\r\n                ) / 100\r\n              }km/s)`}\r\n        </strong>\r\n      </p>\r\n      <p>\r\n        Potentially dangerous if impact:{\" \"}\r\n        {element.is_potentially_hazardous_asteroid ? (\r\n          <strong>Yes</strong>\r\n        ) : (\r\n          \"No\"\r\n        )}\r\n      </p>\r\n    </li>\r\n  ));\r\n  return (\r\n    <div className=\"wrapper-asteroid\">\r\n      {loading ? (\r\n        <div className=\"loader\"></div>\r\n      ) : (\r\n        <main className=\"asteroid-page\">\r\n          <h1 className=\"title\">Near Earth Objects</h1>\r\n          <ToggleSwitch setImperial={setImperial}></ToggleSwitch>\r\n          <ul className=\"asteroid-list-cards\">{listMapped}</ul>\r\n        </main>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Asteroid;\r\n","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\Mars.js",["63"],[],"import { useEffect, useState } from \"react\";\r\n\r\nconst Mars = () => {\r\n  const [begin, setBegin] = useState(true);\r\n  const [rdn, setRdn] = useState(Math.floor(Math.random() * 856));\r\n  const [image, setImage] = useState({\r\n    url: \"\",\r\n    cameraFullName: \"\",\r\n    cameraName: \"\",\r\n    datePicture: \"\",\r\n    roverName: \"\",\r\n    roverLaunchDate: \"\",\r\n    roverLandingDate: \"\",\r\n    status: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchUrl(rdn);\r\n  }, [rdn]);\r\n\r\n  const fetchUrl = async () => {\r\n    setImage({ url: \"\" });\r\n    const query = await fetch(\"/api/mars\");\r\n    const res = await query.json();\r\n    setImage({\r\n      url: res.photos[rdn].img_src,\r\n      cameraFullName: res.photos[rdn].camera.full_name,\r\n      cameraName: res.photos[rdn].camera.name,\r\n      datePicture: res.photos[rdn].earth_date,\r\n      roverName: res.photos[rdn].rover.name,\r\n      roverLaunchDate: res.photos[rdn].rover.launch_date,\r\n      roverLandingDate: res.photos[rdn].rover.landing_date,\r\n      status: res.photos[rdn].rover.status,\r\n    });\r\n  };\r\n\r\n  const generateRdmImage = () => {\r\n    setRdn(Math.floor(Math.random() * 856));\r\n  };\r\n\r\n  return begin ? (\r\n    <div className=\"mars-rover-gallery-start\">\r\n      <h1 className=\"title\">Start exploring pictures from Mars!</h1>\r\n      <p id=\"mars-begin-info\">\r\n        Click on the start button to start displaying random images from Mars.\r\n      </p>\r\n      <button className=\"btn btn-next-img\" onClick={() => setBegin(false)}>\r\n        Start\r\n      </button>\r\n      <p id=\"mars-picture-info\">\r\n        (You might find that some pictures may be small, but that is their\r\n        actual size!)\r\n      </p>\r\n    </div>\r\n  ) : image.url ? (\r\n    <div className=\"mars-rover-gallery\">\r\n      <img className=\"img-mars\" src={image.url} alt=\"random from rover\"></img>\r\n      <div className=\"wrapper-text\">\r\n        <p>\r\n          Image taken by {image.roverName} using the {image.cameraFullName}(\r\n          {image.cameraName})\r\n        </p>\r\n        <p>Date: {image.datePicture}</p>\r\n        <h2>Rover information</h2>\r\n        <p>Name: {image.roverName}</p>\r\n        <p>Launching date: {image.roverLaunchDate}</p>\r\n        <p>Landing date: {image.roverLandingDate}</p>\r\n        <p>Status: {image.status}</p>\r\n        <button className=\"btn btn-next-img\" onClick={() => generateRdmImage()}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className=\"loaderWrapper\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mars;\r\n","C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\ToggleSwitch.js",[],[],"C:\\Users\\etien\\Odin Project\\space-webapp\\client\\src\\Components\\SearchBar.js",["64"],[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":13,"column":10,"nodeType":"71","messageId":"72","endLine":13,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":14,"column":6,"nodeType":"75","endLine":14,"endColumn":20,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":28,"column":6,"nodeType":"75","endLine":28,"endColumn":8,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":25,"column":6,"nodeType":"75","endLine":25,"endColumn":8,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":19,"column":6,"nodeType":"75","endLine":19,"endColumn":11,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":14,"column":6,"nodeType":"75","endLine":14,"endColumn":19,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'apiKey' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'test'. Either include it or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has missing dependencies: 'fetchWeather' and 'typeArray'. Either include them or remove the dependency array.",["88"],"React Hook useEffect has a missing dependency: 'asteroids'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has a missing dependency: 'fetchUrl'. Either include it or remove the dependency array.",["90"],"React Hook useEffect has missing dependencies: 'currentValue' and 'fetchWeather'. Either include them or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [test, toggleButton]",{"range":"102","text":"103"},"Update the dependencies array to be: [fetchWeather, typeArray]",{"range":"104","text":"105"},"Update the dependencies array to be: [asteroids]",{"range":"106","text":"107"},"Update the dependencies array to be: [fetchUrl, rdn]",{"range":"108","text":"109"},"Update the dependencies array to be: [currentValue, date, fetchWeather, reset]",{"range":"110","text":"111"},[567,581],"[test, toggleButton]",[1034,1036],"[fetchWeather, typeArray]",[739,741],"[asteroids]",[450,455],"[fetchUrl, rdn]",[397,410],"[currentValue, date, fetchWeather, reset]"]