{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\etien\\\\Odin Project\\\\space-webapp\\\\client\\\\src\\\\Components\\\\SpaceWeather.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SpaceWeather = props => {\n  _s();\n\n  const {\n    apiKey\n  } = props;\n  const [date, setDate] = useState(\"yyyy-MM-dd\"); //defaut date for API\n\n  const [dateTitle, setDateTitle] = useState(\" in the last 30 days\"); //defaut to last 30days\n\n  const [selectInt, setSelectInt] = useState(0);\n  const [results, setResults] = useState([]); //loading and search booleans to display different items\n\n  const [searchFound, setSearchFound] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const typeArray = [\"FLR\", \"GST\", \"CME\", \"IPS\"];\n  const title = [\"Solar flares\", \"Geomagnetic storms\", \"Coronal Mass Ejections (CME)\", \"Interplanetary Shocks\"]; //once a value is selected save it in current value for individual searches\n\n  const [currentValue, setCurrentValue] = useState(\"FLR\"); //defaut to flares\n\n  useEffect(() => {\n    fetchWeather(typeArray[0]);\n  }, []);\n\n  const fetchWeather = async type => {\n    try {\n      setLoading(true);\n      const query = await fetch(`https://api.nasa.gov/DONKI/${type}?startDate=${date}&endDate=${date}&api_key=${apiKey}`);\n      const res = await query.json();\n      if (res) setLoading(false);\n      console.log(res);\n      setResults(res);\n      resultWeather(results);\n      setSearchFound(true);\n    } catch (err) {\n      //if error returns no result\n      setSearchFound(false);\n      setLoading(false);\n      console.log(err);\n    }\n  }; // Displays the different lists that are chosen by the users\n\n\n  const resultWeather = weatherType => {\n    if (weatherType.length === 0) {\n      return;\n    }\n\n    if (weatherType[0].flrID !== undefined) {\n      return /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"results-weather\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: [\"Solar flares \", dateTitle]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"number-results\",\n          children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: weatherType.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 53\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-weather list-flares\",\n          children: weatherType.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Begin time: \", el.beginTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"End time: \", el.endTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Peak time: \", el.peakTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Class type: \", el.classType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)]\n          }, el.flrID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (weatherType[0].gstID !== undefined) return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"results-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: [\"Geomagnetic storms \", dateTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"number-results\",\n        children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: weatherType.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-weather list-storms\",\n        children: weatherType.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Start time: \", el.startTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Observed time: \", el.allKpIndex[0].observedTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"KP index: \", el.allKpIndex[0].kpIndex]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, el.gstID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this); // Coronal Mass Ejection\n\n    if (weatherType[0].catalog !== undefined && weatherType[0].eventTime === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"results-weather\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: [\"Coronal Mass Ejections (CME) \", dateTitle]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"number-results\",\n          children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: weatherType.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 53\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-weather list-coronal\",\n          children: weatherType.map(el => {\n            if (el.cmeAnalyses !== null) return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Start time: \", el.startTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Latitude: \", el.cmeAnalyses[0].latitude]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Longitude: \", el.cmeAnalyses[0].longitude]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", el.cmeAnalyses[0].type]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Speed: \", el.cmeAnalyses[0].speed, \" km/s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Notes: \", el.note]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 21\n              }, this)]\n            }, el.activityID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this);else return null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this);\n    } //Interplanetary shock\n\n\n    if (weatherType[0].catalog !== undefined && weatherType[0].eventTime !== undefined) return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"results-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: [\"Interplanetary shocks \", dateTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"number-results\",\n        children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: weatherType.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-weather list-shocks\",\n        children: weatherType.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Event time: \", el.eventTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Location of observation: \", el.location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this)]\n        }, el.activityID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-btn-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[0]);\n            setCurrentValue(typeArray[0]);\n            setSelectInt(0);\n          },\n          children: \"Solar flares\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[1]);\n            setCurrentValue(typeArray[1]);\n            setSelectInt(1);\n          },\n          children: \"Geomagnetic storms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[2]);\n            setCurrentValue(typeArray[2]);\n            setSelectInt(2);\n          },\n          children: \"Coronal Mass Ejections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[3]);\n            setCurrentValue(typeArray[3]);\n            setSelectInt(3);\n          },\n          children: \"Interplanetary Shocks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this) : searchFound ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper-results-weather\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        date: date,\n        setDate: setDate,\n        fetchWeather: fetchWeather,\n        setDateTitle: setDateTitle,\n        currentValue: currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), resultWeather(results)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        date: date,\n        setDate: setDate,\n        fetchWeather: fetchWeather,\n        setDateTitle: setDateTitle,\n        currentValue: currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: title[selectInt]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-no-result\",\n        children: [\" \", \"No results found for\", \" \", date === \"yyyy-MM-dd\" ? \"the last 30 days.\" : \"the selected date.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SpaceWeather, \"7M4czvNUuV4fktzI7MwtZmO2CBM=\");\n\n_c = SpaceWeather;\nexport default SpaceWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpaceWeather\");","map":{"version":3,"sources":["C:/Users/etien/Odin Project/space-webapp/client/src/Components/SpaceWeather.js"],"names":["useEffect","useState","SearchBar","SpaceWeather","props","apiKey","date","setDate","dateTitle","setDateTitle","selectInt","setSelectInt","results","setResults","searchFound","setSearchFound","loading","setLoading","typeArray","title","currentValue","setCurrentValue","fetchWeather","type","query","fetch","res","json","console","log","resultWeather","err","weatherType","length","flrID","undefined","map","el","beginTime","endTime","peakTime","classType","gstID","startTime","allKpIndex","observedTime","kpIndex","catalog","eventTime","cmeAnalyses","latitude","longitude","speed","note","activityID","location"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\nconst SpaceWeather = (props) => {\r\n  const { apiKey } = props;\r\n\r\n  const [date, setDate] = useState(\"yyyy-MM-dd\"); //defaut date for API\r\n  const [dateTitle, setDateTitle] = useState(\" in the last 30 days\"); //defaut to last 30days\r\n  const [selectInt, setSelectInt] = useState(0);\r\n  const [results, setResults] = useState([]);\r\n\r\n  //loading and search booleans to display different items\r\n  const [searchFound, setSearchFound] = useState(true);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const typeArray = [\"FLR\", \"GST\", \"CME\", \"IPS\"];\r\n  const title = [\r\n    \"Solar flares\",\r\n    \"Geomagnetic storms\",\r\n    \"Coronal Mass Ejections (CME)\",\r\n    \"Interplanetary Shocks\",\r\n  ];\r\n  //once a value is selected save it in current value for individual searches\r\n  const [currentValue, setCurrentValue] = useState(\"FLR\"); //defaut to flares\r\n  useEffect(() => {\r\n    fetchWeather(typeArray[0]);\r\n  }, []);\r\n\r\n  const fetchWeather = async (type) => {\r\n    try {\r\n      setLoading(true);\r\n      const query = await fetch(\r\n        `https://api.nasa.gov/DONKI/${type}?startDate=${date}&endDate=${date}&api_key=${apiKey}`\r\n      );\r\n      const res = await query.json();\r\n      if (res) setLoading(false);\r\n      console.log(res);\r\n      setResults(res);\r\n      resultWeather(results);\r\n      setSearchFound(true);\r\n    } catch (err) {\r\n      //if error returns no result\r\n      setSearchFound(false);\r\n      setLoading(false);\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // Displays the different lists that are chosen by the users\r\n  const resultWeather = (weatherType) => {\r\n    if (weatherType.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (weatherType[0].flrID !== undefined) {\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Solar flares {dateTitle}</h1>\r\n          <span className=\"number-results\">Results: <strong>{weatherType.length}</strong></span>\r\n          <ul className=\"list-weather list-flares\">\r\n            {weatherType.map((el) => (\r\n              <li key={el.flrID}>\r\n                <p>Begin time: {el.beginTime}</p>\r\n                <p>End time: {el.endTime}</p>\r\n                <p>Peak time: {el.peakTime}</p>\r\n                <p>Class type: {el.classType}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      );\r\n    }\r\n    if (weatherType[0].gstID !== undefined)\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Geomagnetic storms {dateTitle}</h1>\r\n          <span className=\"number-results\">Results: <strong>{weatherType.length}</strong></span>\r\n          <ul className=\"list-weather list-storms\">\r\n            {weatherType.map((el) => (\r\n              <li key={el.gstID}>\r\n                <p>Start time: {el.startTime}</p>\r\n                <p>Observed time: {el.allKpIndex[0].observedTime}</p>\r\n                <p>KP index: {el.allKpIndex[0].kpIndex}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      );\r\n\r\n    // Coronal Mass Ejection\r\n    if (\r\n      weatherType[0].catalog !== undefined &&\r\n      weatherType[0].eventTime === undefined\r\n    ) {\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Coronal Mass Ejections (CME) {dateTitle}</h1>\r\n          <span className=\"number-results\">Results: <strong>{weatherType.length}</strong></span>\r\n          <ul className=\"list-weather list-coronal\">\r\n            {weatherType.map((el) => {\r\n              if (el.cmeAnalyses !== null)\r\n                return (\r\n                  <li key={el.activityID}>\r\n                    <p>Start time: {el.startTime}</p>\r\n                    <p>Latitude: {el.cmeAnalyses[0].latitude}</p>\r\n                    <p>Longitude: {el.cmeAnalyses[0].longitude}</p>\r\n                    <p>Type: {el.cmeAnalyses[0].type}</p>\r\n                    <p>Speed: {el.cmeAnalyses[0].speed} km/s</p>\r\n                    <p>Notes: {el.note}</p>\r\n                  </li>\r\n                );\r\n              else return null;\r\n            })}\r\n          </ul>\r\n        </main>\r\n      );\r\n    }\r\n\r\n    //Interplanetary shock\r\n    if (\r\n      weatherType[0].catalog !== undefined &&\r\n      weatherType[0].eventTime !== undefined\r\n    )\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Interplanetary shocks {dateTitle}</h1>\r\n          <span className=\"number-results\">Results: <strong>{weatherType.length}</strong></span>\r\n          <ul className=\"list-weather list-shocks\">\r\n            {weatherType.map((el) => (\r\n              <li key={el.activityID}>\r\n                <p>Event time: {el.eventTime}</p>\r\n                <p>Location of observation: {el.location}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-main\">\r\n      <ul className=\"list-btn-weather\">\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[0]);\r\n              setCurrentValue(typeArray[0]);\r\n              setSelectInt(0);\r\n            }}>\r\n            Solar flares\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[1]);\r\n              setCurrentValue(typeArray[1]);\r\n              setSelectInt(1);\r\n            }}>\r\n            Geomagnetic storms\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[2]);\r\n              setCurrentValue(typeArray[2]);\r\n              setSelectInt(2);\r\n            }}>\r\n            Coronal Mass Ejections\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[3]);\r\n              setCurrentValue(typeArray[3]);\r\n              setSelectInt(3);\r\n            }}>\r\n            Interplanetary Shocks\r\n          </button>\r\n        </li>\r\n      </ul>\r\n\r\n      {loading ? (\r\n        <div className=\"loader\"></div>\r\n      ) : searchFound ? (\r\n        <div className=\"wrapper-results-weather\">\r\n          <SearchBar\r\n            date={date}\r\n            setDate={setDate}\r\n            fetchWeather={fetchWeather}\r\n            setDateTitle={setDateTitle}\r\n            currentValue={currentValue}\r\n          />\r\n          {resultWeather(results)}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <SearchBar\r\n            date={date}\r\n            setDate={setDate}\r\n            fetchWeather={fetchWeather}\r\n            setDateTitle={setDateTitle}\r\n            currentValue={currentValue}\r\n          />\r\n          <h1 className=\"title\">{title[selectInt]}</h1>\r\n          <h4 className=\"text-no-result\">\r\n            {\" \"}\r\n            No results found for{\" \"}\r\n            {(date === \"yyyy-MM-dd\" ? \"the last 30 days.\" : \"the selected date.\")}\r\n          </h4>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpaceWeather;\r\n"]},"metadata":{},"sourceType":"module"}