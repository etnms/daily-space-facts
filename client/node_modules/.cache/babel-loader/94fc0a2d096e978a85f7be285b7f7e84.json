{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\etien\\\\Odin Project\\\\space-webapp\\\\client\\\\src\\\\Components\\\\Asteroids.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ToggleSwitch from \"./ToggleSwitch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Asteroid = props => {\n  _s();\n\n  const {\n    apiKey\n  } = props;\n  const [loading, setLoading] = useState(true);\n  const [imperial, setImperial] = useState(false);\n  const [listAsteroids, setListAsteroids] = useState([]);\n  const tmpDate = new Date();\n  const day = tmpDate.getDate() < 10 ? `0${tmpDate.getDate().toString()}` : tmpDate.getDate();\n  const month = tmpDate.getMonth() + 1 < 10 ? `0${(tmpDate.getMonth() + 1).toString()}` : tmpDate.getDMonth() + 1;\n  const year = tmpDate.getFullYear();\n  const date = `${year}-${month}-${day}`;\n  useEffect(() => {\n    asteroids();\n  }, []);\n\n  const asteroids = async () => {\n    try {\n      setLoading(true);\n      const query = await fetch(`https://api.nasa.gov/neo/rest/v1/feed?start_date=${date}&end_date=${date}&api_key=${apiKey}`);\n      const res = await query.json();\n      setListAsteroids(res.near_earth_objects[date]);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const listMapped = listAsteroids.map(element => /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"asteroid-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-objects\",\n      children: [\"Name: \", element.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Magnitude: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: element.absolute_magnitude_h\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Estimated Diameter: Min: \", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [imperial ? Math.round(element.estimated_diameter.feet.estimated_diameter_min * 100) / 100 : Math.round(element.estimated_diameter.meters.estimated_diameter_min * 100) / 100, imperial ? \"ft\" : \"m\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 39\n      }, this), \"  - Max:\", \" \", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [imperial ? Math.round(element.estimated_diameter.feet.estimated_diameter_max * 100) / 100 : Math.round(element.estimated_diameter.meters.estimated_diameter_max * 100) / 100, imperial ? \"ft\" : \"m\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 55\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Closest Approach Date: \", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: element.close_approach_data[0].close_approach_date_full\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", \"Will miss the earth by:\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [imperial ? Math.round(element.close_approach_data[0].miss_distance.kilometers) : Math.round(element.close_approach_data[0].miss_distance.miles), imperial ? \"miles\" : \"kms\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Relative velocity:\", \" \", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [imperial ? Math.round(element.close_approach_data[0].relative_velocity.miles_per_hour * 100 / 100) : Math.round(element.close_approach_data[0].relative_velocity.kilometers_per_hour), imperial ? \"miles/hr\" : `km/hr (${Math.round(element.close_approach_data[0].relative_velocity.kilometers_per_second * 100) / 100}km/s)`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Potentially dangerous if impact:\", \" \", element.is_potentially_hazardous_asteroid ? /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 54\n      }, this) : \"No\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, \"asteroid-\" + element.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper-asteroid\",\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"asteroid-page\",\n      children: [/*#__PURE__*/_jsxDEV(ToggleSwitch, {\n        setImperial: setImperial\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Near Earth Objects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: listMapped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Asteroid, \"a5cHFnxlteTro6fZj67sfNy8AUw=\");\n\n_c = Asteroid;\nexport default Asteroid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Asteroid\");","map":{"version":3,"sources":["C:/Users/etien/Odin Project/space-webapp/client/src/Components/Asteroids.js"],"names":["useEffect","useState","ToggleSwitch","Asteroid","props","apiKey","loading","setLoading","imperial","setImperial","listAsteroids","setListAsteroids","tmpDate","Date","day","getDate","toString","month","getMonth","getDMonth","year","getFullYear","date","asteroids","query","fetch","res","json","near_earth_objects","err","console","log","listMapped","map","element","name","absolute_magnitude_h","Math","round","estimated_diameter","feet","estimated_diameter_min","meters","estimated_diameter_max","close_approach_data","close_approach_date_full","miss_distance","kilometers","miles","relative_velocity","miles_per_hour","kilometers_per_hour","kilometers_per_second","is_potentially_hazardous_asteroid"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ToggleSwitch from \"./ToggleSwitch\";\r\n\r\nconst Asteroid = (props) => {\r\n  const { apiKey } = props;\r\n  const [loading, setLoading] = useState(true);\r\n  const [imperial, setImperial] = useState(false);\r\n  const [listAsteroids, setListAsteroids] = useState([]);\r\n\r\n  const tmpDate = new Date();\r\n  const day =\r\n    tmpDate.getDate() < 10\r\n      ? `0${tmpDate.getDate().toString()}`\r\n      : tmpDate.getDate();\r\n  const month =\r\n    tmpDate.getMonth() + 1 < 10\r\n      ? `0${(tmpDate.getMonth() + 1).toString()}`\r\n      : tmpDate.getDMonth() + 1;\r\n  const year = tmpDate.getFullYear();\r\n\r\n  const date = `${year}-${month}-${day}`;\r\n\r\n  useEffect(() => {\r\n    asteroids();\r\n  }, []);\r\n\r\n  const asteroids = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const query = await fetch(\r\n        `https://api.nasa.gov/neo/rest/v1/feed?start_date=${date}&end_date=${date}&api_key=${apiKey}`\r\n      );\r\n      const res = await query.json();\r\n      setListAsteroids(res.near_earth_objects[date]);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const listMapped = listAsteroids.map((element) => (\r\n    <li className=\"asteroid-card\" key={\"asteroid-\" + element.name}>\r\n      <h1 className=\"title-objects\">Name: {element.name}</h1>\r\n      <p>Magnitude: <strong>{element.absolute_magnitude_h}</strong></p>\r\n      <p>\r\n        Estimated Diameter: Min: {\" \"}<strong>\r\n        {imperial\r\n          ? Math.round(\r\n              element.estimated_diameter.feet.estimated_diameter_min * 100\r\n            ) / 100\r\n          : Math.round(\r\n              element.estimated_diameter.meters.estimated_diameter_min * 100\r\n            ) / 100}\r\n        {imperial ? \"ft\" : \"m\"}</strong>  - Max:{\" \"} <strong> \r\n        {imperial\r\n          ? Math.round(\r\n              element.estimated_diameter.feet.estimated_diameter_max * 100\r\n            ) / 100\r\n          : Math.round(\r\n              element.estimated_diameter.meters.estimated_diameter_max * 100\r\n            ) / 100}\r\n        {imperial ? \"ft\" : \"m\"}</strong> \r\n      </p>\r\n      <p>\r\n        Closest Approach Date: {\" \"}<strong> \r\n        {element.close_approach_data[0].close_approach_date_full}\r\n        </strong> \r\n      </p>\r\n      <p>\r\n        {\" \"}\r\n        Will miss the earth by:{\" \"}<strong>\r\n        {imperial\r\n          ? Math.round(element.close_approach_data[0].miss_distance.kilometers)\r\n          : Math.round(element.close_approach_data[0].miss_distance.miles)}\r\n        {imperial ? \"miles\" : \"kms\"}</strong>\r\n      </p>\r\n      <p>\r\n        Relative velocity:{\" \"} <strong>\r\n        {imperial\r\n          ? Math.round(\r\n              (element.close_approach_data[0].relative_velocity.miles_per_hour *\r\n                100) /\r\n                100\r\n            )\r\n          : Math.round(\r\n              element.close_approach_data[0].relative_velocity\r\n                .kilometers_per_hour\r\n            )}\r\n        {imperial\r\n          ? \"miles/hr\"\r\n          : `km/hr (${\r\n              Math.round(\r\n                element.close_approach_data[0].relative_velocity\r\n                  .kilometers_per_second * 100\r\n              ) / 100\r\n            }km/s)`}\r\n            </strong>\r\n      </p>\r\n      <p>\r\n        Potentially dangerous if impact:{\" \"}\r\n        {element.is_potentially_hazardous_asteroid ? <strong>Yes</strong> : \"No\"}\r\n      </p>\r\n    </li>\r\n  ));\r\n  return (\r\n    <div className=\"wrapper-asteroid\">\r\n      {!loading ? (\r\n        <main className=\"asteroid-page\">\r\n          <ToggleSwitch setImperial={setImperial}></ToggleSwitch>\r\n          <h1 className=\"title\">Near Earth Objects</h1>\r\n          <ul>{listMapped}</ul>\r\n        </main>\r\n      ) : (\r\n        <div className=\"loader\"></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Asteroid;\r\n"]},"metadata":{},"sourceType":"module"}