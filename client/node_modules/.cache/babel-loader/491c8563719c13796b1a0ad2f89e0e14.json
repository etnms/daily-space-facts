{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\etien\\\\Odin Project\\\\space-webapp\\\\client\\\\src\\\\Components\\\\SpaceWeather.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SpaceWeather = () => {\n  _s();\n\n  //const [apiKey, setApiKey] = useState();\n  const [date, setDate] = useState(\"yyyy-MM-dd\"); //defaut date for API\n\n  const [dateTitle, setDateTitle] = useState(\" in the last 30 days\"); //defaut to last 30days\n\n  const [selectInt, setSelectInt] = useState(0);\n  const [results, setResults] = useState([]); //loading and search booleans to display different items\n\n  const [searchFound, setSearchFound] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const typeArray = [\"FLR\", \"GST\", \"CME\", \"IPS\"];\n  const title = [\"Solar flares\", \"Geomagnetic storms\", \"Coronal Mass Ejections (CME)\", \"Interplanetary Shocks\"]; //once a value is selected save it in current value for individual searches\n\n  const [currentValue, setCurrentValue] = useState(\"FLR\"); //defaut to flares\n\n  useEffect(() => {\n    // getKey();\n    fetchWeather(typeArray[0]);\n  }, []); //[apiKey]\n\n  /*\r\n  const getKey = async () => {\r\n    const query = await fetch(\"/api\");\r\n    const res = await query.json();\r\n    setApiKey(res.apiKey);\r\n  };\r\n  */\n\n  const fetchWeather = async type => {\n    //if (apiKey !== undefined) {\n    // try {\n    setLoading(true);\n    const query = {\n      method: \"GET\",\n      url: \"/api/near-earth-objects\",\n      query: type,\n      params: {\n        start_date: date,\n        end_date: date\n      }\n    };\n    console.log(query);\n    axios.request(query).then(response => {\n      console.log(response.data);\n      setResults(response.data);\n      setLoading(false);\n      resultWeather(results);\n      setSearchFound(true);\n    }).catch(error => {\n      console.log(error);\n      setSearchFound(false);\n      setLoading(false);\n    }); //const query = await fetch(\n    //   `https://api.nasa.gov/DONKI/${type}?startDate=${date}&endDate=${date}&api_key=${apiKey}`\n    //);\n    // const res = await query.json();\n    // if (res) \n    // setLoading(false);\n    // setResults(res);\n    // resultWeather(results);\n    //setSearchFound(true);\n    // } catch (err) {\n    //if error returns no result\n    // setSearchFound(false);\n    // setLoading(false);\n    // console.log(err);\n    // }\n    // }\n  };\n\n  const formatDate = date => {\n    let letString = date.replace(/[Z]/g, '');\n    letString = letString.replace(/[T]/g, ' ');\n    return letString;\n  }; // Displays the different lists that are chosen by the users\n\n\n  const resultWeather = weatherType => {\n    if (weatherType.length === 0) {\n      return;\n    }\n\n    if (weatherType[0].flrID !== undefined) {\n      return /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"results-weather\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: [\"Solar flares \", dateTitle]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"number-results\",\n          children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: weatherType.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-weather list-flares\",\n          children: weatherType.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Begin time: \", formatDate(el.beginTime), \" UTC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"End time: \", formatDate(el.endTime), \" UTC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Peak time: \", formatDate(el.peakTime), \" UTC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Class type: \", el.classType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)]\n          }, el.flrID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (weatherType[0].gstID !== undefined) return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"results-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: [\"Geomagnetic storms \", dateTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"number-results\",\n        children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: weatherType.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-weather list-storms\",\n        children: weatherType.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Start time: \", formatDate(el.startTime), \" UTC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Observed time: \", formatDate(el.allKpIndex[0].observedTime), \" UTC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"KP index: \", el.allKpIndex[0].kpIndex]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)]\n        }, el.gstID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this); // Coronal Mass Ejection\n\n    if (weatherType[0].catalog !== undefined && weatherType[0].eventTime === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"results-weather\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: [\"Coronal Mass Ejections (CME) \", dateTitle]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"number-results\",\n          children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: weatherType.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-weather list-coronal\",\n          children: weatherType.map(el => {\n            if (el.cmeAnalyses !== null) return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Start time: \", formatDate(el.startTime), \" UTC\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Latitude: \", el.cmeAnalyses[0].latitude]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Longitude: \", el.cmeAnalyses[0].longitude]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", el.cmeAnalyses[0].type]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Speed: \", el.cmeAnalyses[0].speed, \" km/s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Notes: \", el.note]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this)]\n            }, el.activityID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this);else return null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this);\n    } //Interplanetary shock\n\n\n    if (weatherType[0].catalog !== undefined && weatherType[0].eventTime !== undefined) return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"results-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: [\"Interplanetary shocks \", dateTitle]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"number-results\",\n        children: [\"Results: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: weatherType.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-weather list-shocks\",\n        children: weatherType.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Event time: \", formatDate(el.eventTime), \" UTC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Location of observation: \", el.location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this)]\n        }, el.activityID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-btn-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[0]);\n            setCurrentValue(typeArray[0]);\n            setSelectInt(0);\n          },\n          children: \"Solar flares\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[1]);\n            setCurrentValue(typeArray[1]);\n            setSelectInt(1);\n          },\n          children: \"Geomagnetic storms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[2]);\n            setCurrentValue(typeArray[2]);\n            setSelectInt(2);\n          },\n          children: \"Coronal Mass Ejections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => {\n            fetchWeather(typeArray[3]);\n            setCurrentValue(typeArray[3]);\n            setSelectInt(3);\n          },\n          children: \"Interplanetary Shocks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this) : searchFound ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper-results-weather\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        date: date,\n        setDate: setDate,\n        fetchWeather: fetchWeather,\n        setDateTitle: setDateTitle,\n        currentValue: currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), resultWeather(results)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        date: date,\n        setDate: setDate,\n        fetchWeather: fetchWeather,\n        setDateTitle: setDateTitle,\n        currentValue: currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: title[selectInt]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-no-result\",\n        children: [\" \", \"No results found for\", \" \", date === \"yyyy-MM-dd\" ? \"the last 30 days.\" : \"the selected date.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SpaceWeather, \"7M4czvNUuV4fktzI7MwtZmO2CBM=\");\n\n_c = SpaceWeather;\nexport default SpaceWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpaceWeather\");","map":{"version":3,"sources":["C:/Users/etien/Odin Project/space-webapp/client/src/Components/SpaceWeather.js"],"names":["useEffect","useState","SearchBar","axios","SpaceWeather","date","setDate","dateTitle","setDateTitle","selectInt","setSelectInt","results","setResults","searchFound","setSearchFound","loading","setLoading","typeArray","title","currentValue","setCurrentValue","fetchWeather","type","query","method","url","params","start_date","end_date","console","log","request","then","response","data","resultWeather","catch","error","formatDate","letString","replace","weatherType","length","flrID","undefined","map","el","beginTime","endTime","peakTime","classType","gstID","startTime","allKpIndex","observedTime","kpIndex","catalog","eventTime","cmeAnalyses","latitude","longitude","speed","note","activityID","location"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport axios from \"axios\";\r\n\r\nconst SpaceWeather = () => {\r\n //const [apiKey, setApiKey] = useState();\r\n\r\n  const [date, setDate] = useState(\"yyyy-MM-dd\"); //defaut date for API\r\n  const [dateTitle, setDateTitle] = useState(\" in the last 30 days\"); //defaut to last 30days\r\n  const [selectInt, setSelectInt] = useState(0);\r\n  const [results, setResults] = useState([]);\r\n\r\n  //loading and search booleans to display different items\r\n  const [searchFound, setSearchFound] = useState(true);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const typeArray = [\"FLR\", \"GST\", \"CME\", \"IPS\"];\r\n  const title = [\r\n    \"Solar flares\",\r\n    \"Geomagnetic storms\",\r\n    \"Coronal Mass Ejections (CME)\",\r\n    \"Interplanetary Shocks\",\r\n  ];\r\n  //once a value is selected save it in current value for individual searches\r\n  const [currentValue, setCurrentValue] = useState(\"FLR\"); //defaut to flares\r\n  useEffect(() => {\r\n   // getKey();\r\n    fetchWeather(typeArray[0]);\r\n  }, []); //[apiKey]\r\n\r\n  /*\r\n  const getKey = async () => {\r\n    const query = await fetch(\"/api\");\r\n    const res = await query.json();\r\n    setApiKey(res.apiKey);\r\n  };\r\n*/\r\n\r\n  const fetchWeather = async (type) => {\r\n    //if (apiKey !== undefined) {\r\n     // try {\r\n        setLoading(true);\r\n\r\n        const query = {\r\n          method: \"GET\",\r\n          url: \"/api/near-earth-objects\",\r\n          query: type,\r\n          params: {\r\n            start_date: date,\r\n            end_date: date,\r\n          },\r\n        };\r\n        console.log(query);\r\n        axios\r\n        .request(query)\r\n        .then((response) => {\r\n          console.log(response.data);\r\n  \r\n          setResults(response.data);\r\n          setLoading(false);\r\n          resultWeather(results);\r\n          setSearchFound(true);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setSearchFound(false);\r\n          setLoading(false);});\r\n        //const query = await fetch(\r\n       //   `https://api.nasa.gov/DONKI/${type}?startDate=${date}&endDate=${date}&api_key=${apiKey}`\r\n        //);\r\n       // const res = await query.json();\r\n       // if (res) \r\n       // setLoading(false);\r\n       // setResults(res);\r\n       // resultWeather(results);\r\n        //setSearchFound(true);\r\n     // } catch (err) {\r\n        //if error returns no result\r\n       // setSearchFound(false);\r\n       // setLoading(false);\r\n       // console.log(err);\r\n     // }\r\n   // }\r\n  };\r\n\r\n  const formatDate = (date) => {\r\n    let letString = date.replace(/[Z]/g, '')\r\n    letString = letString.replace(/[T]/g, ' ')\r\n    return letString;\r\n  }\r\n  // Displays the different lists that are chosen by the users\r\n  const resultWeather = (weatherType) => {\r\n    if (weatherType.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (weatherType[0].flrID !== undefined) {\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Solar flares {dateTitle}</h1>\r\n          <span className=\"number-results\">\r\n            Results: <strong>{weatherType.length}</strong>\r\n          </span>\r\n          <ul className=\"list-weather list-flares\">\r\n            {weatherType.map((el) => (\r\n              <li key={el.flrID}>\r\n                <p>Begin time: {formatDate(el.beginTime)} UTC</p>\r\n                <p>End time: {formatDate(el.endTime)} UTC</p>\r\n                <p>Peak time: {formatDate(el.peakTime)} UTC</p>\r\n                <p>Class type: {el.classType}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      );\r\n    }\r\n    if (weatherType[0].gstID !== undefined)\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Geomagnetic storms {dateTitle}</h1>\r\n          <span className=\"number-results\">\r\n            Results: <strong>{weatherType.length}</strong>\r\n          </span>\r\n          <ul className=\"list-weather list-storms\">\r\n            {weatherType.map((el) => (\r\n              <li key={el.gstID}>\r\n                <p>Start time: {formatDate(el.startTime)} UTC</p>\r\n                <p>Observed time: {formatDate(el.allKpIndex[0].observedTime)} UTC</p>\r\n                <p>KP index: {el.allKpIndex[0].kpIndex}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      );\r\n\r\n    // Coronal Mass Ejection\r\n    if (\r\n      weatherType[0].catalog !== undefined &&\r\n      weatherType[0].eventTime === undefined\r\n    ) {\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Coronal Mass Ejections (CME) {dateTitle}</h1>\r\n          <span className=\"number-results\">\r\n            Results: <strong>{weatherType.length}</strong>\r\n          </span>\r\n          <ul className=\"list-weather list-coronal\">\r\n            {weatherType.map((el) => {\r\n              if (el.cmeAnalyses !== null)\r\n                return (\r\n                  <li key={el.activityID}>\r\n                    <p>Start time: {formatDate(el.startTime)} UTC</p>\r\n                    <p>Latitude: {el.cmeAnalyses[0].latitude}</p>\r\n                    <p>Longitude: {el.cmeAnalyses[0].longitude}</p>\r\n                    <p>Type: {el.cmeAnalyses[0].type}</p>\r\n                    <p>Speed: {el.cmeAnalyses[0].speed} km/s</p>\r\n                    <p>Notes: {el.note}</p>\r\n                  </li>\r\n                );\r\n              else return null;\r\n            })}\r\n          </ul>\r\n        </main>\r\n      );\r\n    }\r\n\r\n    //Interplanetary shock\r\n    if (\r\n      weatherType[0].catalog !== undefined &&\r\n      weatherType[0].eventTime !== undefined\r\n    )\r\n      return (\r\n        <main className=\"results-weather\">\r\n          <h1 className=\"title\">Interplanetary shocks {dateTitle}</h1>\r\n          <span className=\"number-results\">\r\n            Results: <strong>{weatherType.length}</strong>\r\n          </span>\r\n          <ul className=\"list-weather list-shocks\">\r\n            {weatherType.map((el) => (\r\n              <li key={el.activityID}>\r\n                <p>Event time: {formatDate(el.eventTime)} UTC</p>\r\n                <p>Location of observation: {el.location}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-main\">\r\n      <ul className=\"list-btn-weather\">\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[0]);\r\n              setCurrentValue(typeArray[0]);\r\n              setSelectInt(0);\r\n            }}>\r\n            Solar flares\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[1]);\r\n              setCurrentValue(typeArray[1]);\r\n              setSelectInt(1);\r\n            }}>\r\n            Geomagnetic storms\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[2]);\r\n              setCurrentValue(typeArray[2]);\r\n              setSelectInt(2);\r\n            }}>\r\n            Coronal Mass Ejections\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              fetchWeather(typeArray[3]);\r\n              setCurrentValue(typeArray[3]);\r\n              setSelectInt(3);\r\n            }}>\r\n            Interplanetary Shocks\r\n          </button>\r\n        </li>\r\n      </ul>\r\n\r\n      {loading ? (\r\n        <div className=\"loader\"></div>\r\n      ) : searchFound ? (\r\n        <div className=\"wrapper-results-weather\">\r\n          <SearchBar\r\n            date={date}\r\n            setDate={setDate}\r\n            fetchWeather={fetchWeather}\r\n            setDateTitle={setDateTitle}\r\n            currentValue={currentValue}\r\n          />\r\n          {resultWeather(results)}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <SearchBar\r\n            date={date}\r\n            setDate={setDate}\r\n            fetchWeather={fetchWeather}\r\n            setDateTitle={setDateTitle}\r\n            currentValue={currentValue}\r\n          />\r\n          <h1 className=\"title\">{title[selectInt]}</h1>\r\n          <h4 className=\"text-no-result\">\r\n            {\" \"}\r\n            No results found for{\" \"}\r\n            {date === \"yyyy-MM-dd\" ? \"the last 30 days.\" : \"the selected date.\"}\r\n          </h4>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpaceWeather;\r\n"]},"metadata":{},"sourceType":"module"}